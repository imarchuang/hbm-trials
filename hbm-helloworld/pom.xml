<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.imarchuang.hbm</groupId>
		<artifactId>hbm-trials</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>
	<groupId>com.imarchuang.hbm.helloworld</groupId>
	<artifactId>hbm-helloworld</artifactId>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<hibernate.version>4.2.1.Final</hibernate.version>
		<hsqldb.version>1.8.0.10</hsqldb.version>
		<slf4j.version>1.7.5</slf4j.version>
		<logback.version>1.0.13</logback.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		<dependency>
			<groupId>hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>${hsqldb.version}</version>
		</dependency>
		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-tools</artifactId>
			<version>4.0.0-CR1</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<!-- Hibernatetool will generate everything before running tests -->
						<phase>test-compile</phase>
						<configuration>
							<target>
								<!-- For an introduction to the <hibernatetool> Ant Task see http://docs.jboss.org/tools/4.1.0.Final/en/hibernatetools/html_single/index.html#ant -->
								<echo message="Ant target, through maven-antrun-plugin, started" />

								<property name="maven_compile_classpath" refid="maven.compile.classpath" />
								<property name="maven_test_classpath" refid="maven.test.classpath" />
								<path id="hibernatetool.path">
									<!-- Despite what states the documentation about referencing the 
										Maven classpaths at http://maven.apache.org/plugins/maven-antrun-plugin/examples/classpaths.html 
										writing: <pathelement path="maven.test.classpath" /> does not work for this 
										project. So I have set ant properties that refer to appropriate Maven classpathes. -->
									<pathelement path="${maven_compile_classpath}" />
									<pathelement path="${maven_test_classpath}" />
								</path>

								<!-- As described in "Using tasks not included in Ant's default jar" 
									at http://maven.apache.org/plugins/maven-antrun-plugin/examples/customTasks.html 
									I should have: * used classpathref="maven.plugin.classpath" * written all 
									hibernatetool dependencies but because there are too many dependencies to 
									write, as shown at http://mvnrepository.com/artifact/org.hibernate/hibernate-tools/4.0.0-CR1, 
									I have preferred to leverage on Maven dependency management. So I have declared 
									hibernate-tools artifact as one of my project dependency leaving Maven finding 
									out the transitive dependencies. But because dependencies on maven.plugin.classpath 
									are not packaged in the jar I have explicity excluded hibernate-tools, and 
									its dependencies, from my project packaging declaring them in the "test" 
									scope. Thus hibernate-tools dependencies were both on the maven.compile.classpath 
									and the maven.test.classpath, so I have defined a "hibernatetool.path" that 
									groups the compile and the test classpath. -->
								<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask"
									classpathref="hibernatetool.path" />

								<property name="generatedByHibernate.outputDirectory"
									value="${project.build.directory}/generated/hibernatetool" />
								<mkdir dir="${generatedByHibernate.outputDirectory}" />

								<hibernatetool destdir="${generatedByHibernate.outputDirectory}">
									<classpath>
										<path location="${project.build.directory}/classes" />
									</classpath>
									<configuration
										configurationfile="${project.build.directory}/classes/hibernate.cfg.xml" />
									<hbm2ddl export="true" drop="true" create="true"
										outputfilename="helloworld.ddl" format="true" />
								</hibernatetool>

								<echo message="Ant target, through maven-antrun-plugin, terminated" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>